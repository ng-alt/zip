.!
.!  File:       ZIP.RNH
.!
.!  Author:     Hunter Goatley
.!
.!  Date:       October 22, 1991
.!
.!  Description:
.!
.!      RUNOFF source file for portable ZIP on-line help for VMS.
.!      Adapted from MANUAL, distributed with ZIP.
.!
.!      To build:       $ RUNOFF ZIP.RNH
.!                      $ LIBR/HELP/INSERT libr ZIP
.!
.!  Modification history:
.!
.!      Hunter Goatley          22-OCT-1991 20:45
.!              Genesis.
.!      Jean-loup Gailly        25 March 92
.!              Adaptation to zip 1.6.
.!      Igor Mandrichenko       9-JUN-1992
.!              Added explanation of -V option.
.!      Jean-loup Gailly        14 June 92
.!              Adaptation to zip 1.8.
.!      Jean-loup Gailly        20 Aug 92
.!              Adaptation to zip 1.9.
.!      Jean-loup Gailly        31 Aug 93
.!              Adaptation to zip 2.0.
.!      Christian Spieler       20 Sep 93
.!              Adaptation to zip 2.0 and OpenVMS completed.
.!      Christian Spieler       05 Dec 95
.!              Adaptation to zip 2.1, new options.
.!      Christian Spieler       20 Jan 96
.!              Changed -L and -v descriptions.
.!      Christian Spieler       11 Feb 96
.!              Added -X option.
.!      Onno van der Linden,
.!      Christian Spieler       13 Mar 96
.!              Removed -ee option.
.!      Christian Spieler       09 Feb 96
.!              Updated copyright notice, Zip version.
.!      Christian Spieler       21 Jul 97
.!              Added -P, -R, -i@, -x@ and -tt options, modified for Zip 2.2.
.!      Christian Spieler       14 Oct 97
.!              unified spelling of "Info-ZIP", final cleanups for 2.2.
.!      Steven Schweda          24 Mar 2005
.!              General update for version 3.0.
.!
.noflags
.lm4 .rm72
.indent -4
1 ZIP
.br
Zip is a compression and file packaging utility for several operating
systems, including Unix, VMS,  MSDOS, OS/2, Windows NT, Minix, Atari,
Macintosh, Amiga and Acorn RISC OS.  It is analogous to a combination of
tar and compress and is compatible with PKZIP (Phil Katz's ZIP) for
MSDOS systems.
.sk
A companion program, UnZip, unpacks  zip  archives.  Zip and UnZip can
work with files produced by PKZIP, and PKZIP and PKUNZIP can work with
files produced by Zip.
.sk
For a brief help on Zip and UnZip, run each without specifying any
parameters on the command line.
.sk
Zip is useful for packaging a set of files for distribution, for
archiving files, and for saving disk space by temporarily compressing
unused files or directories.
.sk
Zip puts one or more compressed files into a single "zipfile", along with
information about the files (name, path, date and time of last modification,
protection, and check information to verify file integrity).  Zip can pack
an entire directory structure in a zipfile with a single command.
Compression ratios of 2:1 to 3:1 are common for text files.  Zip has
one compression method (deflation) and can also store files without
compression.  It automatically chooses the better of the two for each file
to be compressed.
.sk
Format:
.sk;.lm+1;.literal
ZIP [-options] [-b path] [-n suffixes] [-t mmddyyyy] [-tt mmddyyyy]
    [zipfile [file1 [file2 [...]]]] [-x list] [-i list]
.end literal;.lm-1
.!------------------------------------------------------------------------------
.indent -4
2 Options
.br
The default action of Zip is to add or replace zipfile entries from list, which
can include the special name -@ to read names from SYS$INPUT.  
.sk
With SET PROCESS /PARSE_STYLE = EXTENDED (available on recent non-VAX
systems), Zip preserves the case of the command line.  Otherwise, mixed-
or upper-case options and arguments must be quoted.  (For example,
"-V".)
.sk
The following list of options was taken from the on-line help generated
when Zip is run without any command-line parameters:
.sk
.literal
  -A   adjust self-extracting exe
  -b   use "path" for temp files
  -c   add one-line comments
  -C   preserve case of all file names in zipfile
  -C-  down-case all file names in zipfile
  -C2  preserve case of ODS2 file names in zipfile
  -C2- down-case ODS2 file names in zipfile (default)
  -C5  preserve case of ODS5 file names in zipfile (default)
  -C5- down-case ODS5 file names in zipfile
  -d   delete entries in zipfile
  -db  display running bytes
  -dc  display running file count
  -dd  display dot each size MBs
  -de  force data descriptors
  -D   do not add directory entries
  -e   encrypt
  -f   freshen: only changed files
  -F   fix zipfile (-FF try harder)
  -g   allow growing existing zipfile (unless updating or deleting)
  -h   show the Zip help screen
  -h2  show more Zip help
  -i   include only names matching the following patterns
  -i@  include only names matching the patterns in "file"
  -j   junk (don't record) directory names
  -J   junk (remove) prepended (SFX) stub
  -k   simulate PKZIP made zipfile (DOS names)
  -l   translate end-of-lines (LF -> CRLF)
  -ll  translate end-of-lines (CRLF -> LF)
  -L   show software license
  -m   move into zipfile (delete files)
  -n   don't compress these suffixes
  -nw  no wildcards
  -o   make zipfile as old as latest entry
  -P   encrypt with supplied "password" string
  -q   quiet operation
  -r   recurse into directories from specified path patterns
  -R   recurse into subdirs from current dir, match filenames only
  -s   enable splitting of zipfile, and specify split size
  -sc  show command line
  -sd  show debug
  -so  show options
  -sp  pause and select split destination
  -t   only do files after "mmddyyyy"
  -tt  only do files before "mmddyyyy"
  -T   test zipfile integrity (runs UnZip -T)
  -u   update: only changed or new files
  -v   verbose messages/print version info
  -V   save VMS file attributes
  -VV  save VMS file attributes and all allocated blocks
  -w   save VMS version numbers in zipfile
  -ww  save VMS version numbers in zipfile as ".nnn" instead of ";nnn"
  -x   exclude all names matching the following patterns
  -x@  exclude all names matching the patterns in "file"
  -X   suppress storing of any extra file attributes
  -z   add zipfile comment
  -0   store only
  -1   compress faster
  -9   compress better
  -@   read list of input files from SYS$INPUT
.end literal
.!------------------------------------------------------------------------------
.indent -4
2 How_To_Use_Zip
.br
The simplest use of Zip is as follows:
.sk;.indent 10;$ zip stuff *
.sk
This will create the file "STUFF.ZIP" (assuming it does not exist) and put
all the files in the current directory in STUFF.ZIP in a compressed form.
The .ZIP suffix is added automatically, unless the zipfile name given
contains a dot already.  This allows specifying suffixes other than ".ZIP".
.sk
To zip up an entire directory, the command:
.sk;.indent 10
$ zip -r foo *.*
.sk
will create the file "FOO.ZIP" containing all the files and directories in
the in the current directory.  The "r" option means recurse through the
directory structure. If you wish to recurse through the subdirectory [x.y]
use the following syntax:
.sk;.indent 10
zip -r foo [x]y.dir
.sk
You may want to make a zipfile that contains the files in [.FOO], but not
record the directory name, FOO.  You can use the -j (junk path) option to
leave off the path:
.sk;.indent 10
$ zip -j foo [.foo]*.*
.sk
You might be zipping to save disk space, in which case you could:
.sk;.indent 10
$ zip -rm foo *.txt
.sk
where the "m" option means "move".  This will delete all files matching
*.txt after making FOO.ZIP.  No deletions will be done until the zip has
completed with no errors.  This option is obviously more dangerous and
should be used with care.
.sk
If the zipfile already exists, these commands will replace existing or add
new entries to the zipfile.  For example, if you were really short on disk
space, you might not have enough room simultaneously to hold the directory
[.FOO] and the compressed FOO.ZIP.  In this case, you could do it in steps.
If [.FOO] contained the subdirectories [.TOM], [.DICK], and [.HARRY], then
you could:
.sk;
.indent 10;$ zip -rm foo [.foo.tom]
.indent 10;$ zip -rm foo [.foo.dick]
.indent 10;$ zip -rm foo [.foo.harry]
.sk
where the first command would create FOO.ZIP, and the next two would add to
it.  At the completion of each Zip command, the files in the directory just
zipped would be deleted, making room in which the next Zip command could
work.
.!------------------------------------------------------------------------------
.indent -4
2 Modifying_Existing_Zip_Files
.br
When given the name of an existing zipfile with the above commands, Zip
will replace identically named entries in the zipfile or add entries for
new names.  For example, if FOO.ZIP exists and contains foo/file1 and
foo/file2, and the directory [.FOO] contains the files foo/file1 and
foo/file3, then:
.sk;.indent 10
$ zip -r foo [.foo]
.sk
will replace foo/file1 in foo.zip and add foo/file3 to FOO.ZIP.  After
this, FOO.ZIP contains foo/file1, foo/file2, and foo/file3, with foo/file2
unchanged from before.
.sk
When changing an existing zipfile, Zip will write a temporary file with
the new contents, and only replace the old one when the Zip has completed
with no errors. You can use
the -b option to specify a different path (usually a different device) to
put the temporary files in.  For example:
.sk;.indent 10
$ zip -b scratch$:[tmp] stuff *
.sk
will put the temporary zipfile and the temporary compression files in the
directory "SCRATCH$:[TMP]", copying over STUFF.ZIP in the current directory
when done.
.sk
If you are only adding entries to a zipfile, not replacing, and the -g
option is given, then Zip grows (appends to) the file instead of copying
it.  The danger of this is that if the operation fails, the original
zipfile is corrupted and lost.
.sk
There are two other ways to change or add entries in a zipfile that are
restrictions of simple addition or replacement.  The first is -u (update)
which will add new entries to the zipfile as before but will replace
existing entries only if the modified date of the file is more recent than
the date recorded for that name in the zipfile.  For example:
.sk;.indent 10
$ zip -u stuff *
.sk
will add any new files in the current directory, and update any changed
files in the zipfile STUFF.ZIP.  Note that Zip will not try to pack
STUFF.ZIP into itself when you do this.  Zip will always exclude the
zipfile from the files on which to be operated.
.sk
The second restriction is -f (freshen) which, like update, will only
replace entries with newer files; unlike update, will not add files that
are not already in the zipfile. For this option, you may want to simply
freshen all of the files that are in the specified zipfile.  To do this
you would simply:
.sk;.indent 10
$ zip -f foo
.sk
Note that the -f option with no arguments freshens all the entries in the
zipfile.  The same is true of -u, and hence "zip -u foo" and "zip -f foo"
both do the same thing.
.sk
This command should be run from the same directory from which the original
Zip command was run, since paths stored in zipfiles are always relative.
.sk
Another restriction that can be used with adding, updating, or freshening
is -t (time), which will not operate on files modified earlier than the
specified date.  For example:
.sk;.indent 10
$ zip -rt 12071991 infamy [.FOO]*.*
.sk
will add all the files in [.FOO] and its subdirectories that were last
modified on December 7, 1991, or later to the zipfile INFAMY.ZIP.
.sk
Also, files can be explicitly excluded using the -x option:
.sk;.indent 10
$ zip -r foo [.FOO] -x *.obj
.sk
which will zip up the contents of [.FOO] into FOO.ZIP but exclude all the
files that end in ".OBJ".
.sk
The last operation is -d (delete) which will remove entries from a
zipfile.  An example might be:
.sk;.indent 10
$ zip -d foo foo/harry/*.* *.obj
.sk
which will remove all of the files that start with "foo/harry/" and all of
the files that end with ".OBJ" (in any path).
.sk
Under VMS, -d is case sensitive when it matches names in the zipfile.
This allows deleting names that were zipped on other systems, but requires
that the names be entered in upper case if they were zipped on an MSDOS
system (by PKZIP or in PKZIP compatibility mode), so that the names can be
found in the zipfile and deleted.
.!------------------------------------------------------------------------------
.indent -4
2 More_Options
.br
As mentioned before, Zip will use the best of two methods: deflate or store.
The option -0 will force Zip to use store on all files. For example:
.sk;.indent 10
zip -r0 foo foo.dir
.sk
will zip up the directory foo into foo.zip using only store.
.sk
The speed of deflation can also be controlled with options -1 (fastest
method but less compression) to -9 (best compression but slower). The
default value is -6. For example:
.sk;.indent 10
zip -r8 foo foo.dir
.sk
In nearly all cases, a file that is already compressed cannot be compressed
further by Zip, or if it can, the effect is minimal.  The -n option
prevents Zip from trying to compress files that have the
given suffixes.  Such files are simply stored (0%
compression) in the
output zipfile, so that Zip doesn't waste its time trying to compress
them. The suffixes are separated by
either colons or semicolons.  For example, in DCL:
.sk
.indent 10;$ zip -rn ".Z:.zip:.tiff:.gif:.snd" foo [.FOO]*.*
.sk
will put everything in [.FOO] into FOO.ZIP, but will store any files that end
in .Z, .ZIP, .TIFF, .GIF, or .SND without trying to compress them.  (Image and
sound files often have their own specialized compression methods.)
The default suffix list is ".Z:.zip;.zoo:.arc:.lzh:.arj".
The environment variable ZIPOPT can be used to change this default. For
example:
.sk
.indent 10;$ ZIPOPT == "-n .Z:.zip:.tiff:.gif:.snd"
.sk
The variable ZIPOPT can be used for any option (except -i and -x)
and can include several options.
.sk
For VMS Zip, the alternative environment variable name ZIP_OPTS may
be used, if a more "VMS-like" name is prefered.  If both ZIPOPT and
ZIP_OPTS are present (and do not equate to whitespace only),
the content of ZIPOPT takes precedence and ZIP_OPTS is ignored.
.sk
Under Unix, Zip will store the full path (relative to the current path)
and name of the file (or just the name if -j is specified) in the
zipfile along with the Unix attributes, and it will mark the entry as
made under Unix.  If the zipfile is intended for PKUNZIP under MSDOS,
then the -k (Katz) option should be used to attempt to convert the names
and paths to conform to MSDOS, store only the MSDOS attribute (just the
user write attribute from Unix), and mark the entry as made under MSDOS
(even though it wasn't).
.sk
The -o (older) option will set the "last modified" time of the zipfile to
the latest "last modified" time of the entries in the zipfile.  This can
be used without any other operations, if desired.  For example:
.sk;.indent 10
$ zip -o foo
.sk
will change the last modified time of FOO.ZIP to the latest time of the
entries in FOO.ZIP.
.sk
The -e and -c options operate on all files updated or added to the
zipfile.  Encryption (-e) will prompt for a password on the terminal and
will not echo the password as it is typed (if SYS$COMMAND is not a TTY,
Zip will exit with an error). New zip entries will be encrypted using
that password. For added peace of mind, Zip will prompt for the password
a second time, checking that the two inputs are the same before using
it.
.sk
One-line comments can be added for each file with the -c option.  The
zipfile operations (adding or updating) will be done first, and you will then
be prompted for a one-line comment for each file.  You can then enter the
comment followed by return, or just return for no comment.
.sk
The -z option will prompt you for a multi-line comment for the entire
zipfile.  This option can be used by itself, or in combination with other
options.  The comment is ended by a line containing just a period, or an
end of file condition (^D on Unix, ^Z on MSDOS, OS/2, and VMS).
.sk
The -q (quiet) option eliminates the informational messages and comment
prompts while Zip is operating.  This might be used in shell scripts, for
example, or if the zip operation is being performed as a background task
("$ spawn/nowait zip -q foo *.c").
.sk
Zip can take a list of file names to operate on from SYS$INPUT using the
"-@"
option.
.!  In Unix, this option can be used with the find command to extend
.!greatly the functionality of Zip. For example, to zip up all the C source
.!files in the current directory and its subdirectories, you can:
.!.sk
.!find . -type f -name "*.[ch]" -print | zip source -@
.!.sk
.!Note that the pattern must be quoted to keep the shell from expanding it.
.sk
The -X option (remember to quote it!) suppresses saving of additional
"extra file attributes" in the zipfile. Its effect is to disable the
VMS-only -V option (see below), and prevent storing of UNIX compatible
GMT modification time stamps. These UNIX compatible GMT time stamps
-- which are quite useful when transporting Zip archives world wide (but
are only recognized by Info-ZIP's UnZip 5.20 or later) --
are included in the zipfile unless -X or -V is specified (in case your
version of Zip has the USE_EF_UT_TIME option compiled in).
.sk
Under VMS only, the -w option will append the version number of the files
to the name and zip up multiple versions of files.  Without -w, Zip will
only use the most recent version of the specified file(s).  -ww acts like
-w, but the version numbers are stored as ".nnn" instead of ";nnn".
.sk
One more option that valid only under VMS is -V option. This option saves
all (hopefully) file attributes needed to make EXACT copy of the
file after extraction from archive. To extract a file with saved attributes,
use UnZip version 5.20 or later.
.sk
The -l option translates the Unix end-of-line character LF into the
MSDOS convention CR LF. This option should not be used on binary files.
This option can be used on Unix or VMS if the zipfile is intended for
PKUNZIP under MSDOS.
.sk
If Zip is run with the -h option, or with no arguments and standard output is
a terminal, the license and the command-argument and option help is shown.
.sk
The -L option shows the Zip license.
.sk
The -v option, when given as the only command line argument, directs Zip to
display diagnostic information that shows when and how the executable was
built and set up. This includes info on used compiler and compiler version
(if available) as well as any optional compile time feature flags.
Additionally, the content of the environment variables
(logical names) read by Zip for runtime configuration are shown. This
information is especially valuable when reporting problems or bugs.
.!------------------------------------------------------------------------------
.indent -4
2 Diagnostics
.br
       On VMS, Zip's UNIX style exit values are mapped into proper
       VMS status codes:
.literal
   1                                  (success)  normal exit,
   (0x7fff0000 + 16*Zip_error_level)  warnings
   (0x7fff0002 + 16*Zip_error_level)  normal errors
   (0x7fff0004 + 16*Zip_error_level)  fatal errors
.end literal

       The Zip error level (or exit code) approximates the exit
       codes defined by PKWARE and takes on the following values:
.literal

  VMS        Zip      Type of error
  severity   errcode
    -          0      Normal; no errors or warnings detected.
    F          2      Unexpected end of zipfile.
    E          3      A generic error in the  zipfile  format  was
                      detected.   Processing  may  have  completed
                      successfully anyway;  some  broken  zipfiles
                      created by other archivers have simple work-
                      arounds.
    F          4      Zip was unable to allocate memory for one or
                      more  buffers during program initialization.
    F          5      A severe error in  the  zipfile  format  was
                      detected.   Processing probably failed imme-
                      diately.
    E          6      Entry too large to be split with zipsplit
    E          7      Invalid comment format
    F          8      Zip -T failed or out of memory
    E          9      The user aborted zip prematurely  with  con-
                      trol-C (or similar)
    F          10     Zip  encountered an error while using a temp
                      file
    F          11     Read or seek error
    W          12     Zip has nothing to do
    E          13     Missing or empty zip file
    F          14     Error writing to a file
    F          15     Zip was unable to create a file to write to
    E          16     Bad command line parameters
    E          18     Zip could not open a specified file to read
.end literal
.!------------------------------------------------------------------------------
.indent -4
2 Copyright
.br
     Copyright (c) 1990-2003 Info-ZIP.  All rights reserved.
.sk
     This is version 2003-May-08 of the Info-ZIP copyright and license.
     The definitive version of this document should be available at
     ftp://ftp.info-zip.org/pub/infozip/license.html indefinitely.
.sk
     For the purposes of this copyright and license, "Info-ZIP" is
     defined as the following set of individuals:
.sk
     Mark Adler, John Bush, Karl Davis, Harald Denker, Jean-Michel Dubois,
     Jean-loup Gailly, Hunter Goatley, Ian Gorman, Chris Herborth,
     Dirk Haase, Greg Hartwig, Robert Heath, Jonathan Hudson, Paul Kienitz,
     David Kirschbaum, Johnny Lee, Onno van der Linden, Igor Mandrichenko,
     Steve P. Miller, Sergio Monesi, Keith Owens, George Petrov, Greg Roelofs,
     Kai Uwe Rommel, Steve Salisbury, Dave Smith, Christian Spieler,
     Antoine Verheijen, Paul von Behren, Rich Wales, Mike White
.sk
     This software is provided "as is," without warranty of any kind,
     express or implied.  In no event shall Info-ZIP or its contributors
     be held liable for any direct, indirect, incidental, special or
     consequential damages arising out of the use of or inability to use
     this software.
.sk
     Permission is granted to anyone to use this software for any purpose,
     including commercial applications, and to alter it and redistribute it
     freely, subject to the following restrictions:
.sk
    1. Redistributions of source code must retain the above copyright notice,
       definition, disclaimer, and this list of conditions.
.sk
    2. Redistributions in binary form (compiled executables) must reproduce
       the above copyright notice, definition, disclaimer, and this list of
       conditions in documentation and/or other materials provided with the
       distribution.  The sole exception to this condition is redistribution
       of a standard UnZipSFX binary (including SFXWiz) as part of a
       self-extracting archive; that is permitted without inclusion of this
       license, as long as the normal SFX banner has not been removed from
       the binary or disabled.
.sk
    3. Altered versions--including, but not limited to, ports to new operating
       systems, existing ports with new graphical interfaces, and dynamic,
       shared, or static library versions--must be plainly marked as such
       and must not be misrepresented as being the original source.  Such
       altered versions also must not be misrepresented as being Info-ZIP
       releases--including, but not limited to, labeling of the altered
       versions with the names "Info-ZIP" (or any variation thereof, including,
       but not limited to, different capitalizations), "Pocket UnZip," "WiZ"
       or "MacZip" without the explicit permission of Info-ZIP.  Such altered
       versions are further prohibited from misrepresentative use of the
       Zip-Bugs or Info-ZIP e-mail addresses or of the Info-ZIP URL(s).
.sk
    4. Info-ZIP retains the right to use the names "Info-ZIP," "Zip," "UnZip,"
       "UnZipSFX," "WiZ," "Pocket UnZip," "Pocket Zip," and "MacZip" for its
       own source and binary releases.
.sk
All bug reports or patches should go to zip-bugs via the web site
contact form at http://www.Info-ZIP.org.
Patches should be sent as unified or context diffs only (diff -u or
diff -c).  
.sk
Any bug report should include the Zip version, any special compilation
options (see zip -v), the host system type and operating system
version, and any other relevant information (compiler version, lunar
phase, ...).  
.!------------------------------------------------------------------------------
.indent -4
2 Acknowledgements
.br
       Thanks to R. P. Byrne for his Shrink.Pas program, which
       inspired this project, and from which the shrink algorithm
       was stolen; to Phil Katz for placing in the public domain
       the zip file format, compression format, and .ZIP filename
       extension, and for accepting minor changes to the file
       format; to Steve Burg for clarifications on the deflate
       format; to Haruhiko Okumura and Leonid Broukhis for pro-
       viding some useful ideas for the compression algorithm; to
       Keith Petersen, Rich Wales, Hunter Goatley and Mark Adler
       for providing a mailing list and ftp site for the Info-ZIP
       group to use; and most importantly, to the Info-ZIP group
       itself (listed in the file infozip.who) without whose
       tireless testing and bug-fixing efforts a portable zip
       would not have been possible.  Finally we should thank
       (blame) the first Info-ZIP moderator, David Kirschbaum,
       for getting us into this mess in the first  place.
.!------------------------------------------------------------------------------
.indent -4
2 Bugs
.br
     For the most portable archive, VMS file formats should be
     restricted to Stream_LF and 512-byte fixed-length record file
     formats.  "Zip -V" (or -VV) should preserve all RMS file attributes
     for restoration on a VMS system, but file formats which include
     embedded byte counts and other such data may be of limited use on
     other systems
.sk
     When using Kermit to transfer zipfiles from VMS to MSDOS, type "set
     file type block" on the VMS side.  When transfering from MSDOS to VMS,
     type "set file type fixed" on the VMS machine.  In both cases, type
     "set file type binary" on MSDOS.
.!------------------------------------------------------------------------------
